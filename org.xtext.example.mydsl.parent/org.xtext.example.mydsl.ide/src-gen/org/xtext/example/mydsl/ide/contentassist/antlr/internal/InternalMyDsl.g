/*
 * generated by Xtext 2.15.0
 */
grammar InternalMyDsl;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package org.xtext.example.mydsl.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.xtext.example.mydsl.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.xtext.example.mydsl.services.MyDslGrammarAccess;

}
@parser::members {
	private MyDslGrammarAccess grammarAccess;

	public void setGrammarAccess(MyDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleScenario
entryRuleScenario
:
{ before(grammarAccess.getScenarioRule()); }
	 ruleScenario
{ after(grammarAccess.getScenarioRule()); } 
	 EOF 
;

// Rule Scenario
ruleScenario 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getScenarioAccess().getGroup()); }
		(rule__Scenario__Group__0)
		{ after(grammarAccess.getScenarioAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCasDeTest
entryRuleCasDeTest
:
{ before(grammarAccess.getCasDeTestRule()); }
	 ruleCasDeTest
{ after(grammarAccess.getCasDeTestRule()); } 
	 EOF 
;

// Rule CasDeTest
ruleCasDeTest 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCasDeTestAccess().getGroup()); }
		(rule__CasDeTest__Group__0)
		{ after(grammarAccess.getCasDeTestAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAction
entryRuleAction
:
{ before(grammarAccess.getActionRule()); }
	 ruleAction
{ after(grammarAccess.getActionRule()); } 
	 EOF 
;

// Rule Action
ruleAction 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getActionAccess().getGroup()); }
		(rule__Action__Group__0)
		{ after(grammarAccess.getActionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Action__Alternatives_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getActionAccess().getValeurAssignment_1_0()); }
		(rule__Action__ValeurAssignment_1_0)
		{ after(grammarAccess.getActionAccess().getValeurAssignment_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getActionAccess().getGroup_1_1()); }
		(rule__Action__Group_1_1__0)
		{ after(grammarAccess.getActionAccess().getGroup_1_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Scenario__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Scenario__Group__0__Impl
	rule__Scenario__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Scenario__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getScenarioAccess().getDebutScenarioKeyword_0()); }
	'debut Scenario'
	{ after(grammarAccess.getScenarioAccess().getDebutScenarioKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Scenario__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Scenario__Group__1__Impl
	rule__Scenario__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Scenario__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getScenarioAccess().getNameAssignment_1()); }
	(rule__Scenario__NameAssignment_1)
	{ after(grammarAccess.getScenarioAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Scenario__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Scenario__Group__2__Impl
	rule__Scenario__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Scenario__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getScenarioAccess().getTitreKeyword_2()); }
	'titre'
	{ after(grammarAccess.getScenarioAccess().getTitreKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Scenario__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Scenario__Group__3__Impl
	rule__Scenario__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Scenario__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getScenarioAccess().getTitleScenarioAssignment_3()); }
	(rule__Scenario__TitleScenarioAssignment_3)
	{ after(grammarAccess.getScenarioAccess().getTitleScenarioAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Scenario__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Scenario__Group__4__Impl
	rule__Scenario__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Scenario__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getScenarioAccess().getCasDeTestsAssignment_4()); }
		(rule__Scenario__CasDeTestsAssignment_4)
		{ after(grammarAccess.getScenarioAccess().getCasDeTestsAssignment_4()); }
	)
	(
		{ before(grammarAccess.getScenarioAccess().getCasDeTestsAssignment_4()); }
		(rule__Scenario__CasDeTestsAssignment_4)*
		{ after(grammarAccess.getScenarioAccess().getCasDeTestsAssignment_4()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Scenario__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Scenario__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Scenario__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getScenarioAccess().getFinScenarioKeyword_5()); }
	'fin Scenario'
	{ after(grammarAccess.getScenarioAccess().getFinScenarioKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__CasDeTest__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CasDeTest__Group__0__Impl
	rule__CasDeTest__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CasDeTest__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCasDeTestAccess().getCasDeTestKeyword_0()); }
	'Cas de test : '
	{ after(grammarAccess.getCasDeTestAccess().getCasDeTestKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CasDeTest__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CasDeTest__Group__1__Impl
	rule__CasDeTest__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__CasDeTest__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCasDeTestAccess().getTitreCasDeTestAssignment_1()); }
	(rule__CasDeTest__TitreCasDeTestAssignment_1)
	{ after(grammarAccess.getCasDeTestAccess().getTitreCasDeTestAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CasDeTest__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CasDeTest__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CasDeTest__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getCasDeTestAccess().getActionsAssignment_2()); }
		(rule__CasDeTest__ActionsAssignment_2)
		{ after(grammarAccess.getCasDeTestAccess().getActionsAssignment_2()); }
	)
	(
		{ before(grammarAccess.getCasDeTestAccess().getActionsAssignment_2()); }
		(rule__CasDeTest__ActionsAssignment_2)*
		{ after(grammarAccess.getCasDeTestAccess().getActionsAssignment_2()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Action__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Action__Group__0__Impl
	rule__Action__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Action__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getActionAccess().getActionAssignment_0()); }
	(rule__Action__ActionAssignment_0)
	{ after(grammarAccess.getActionAccess().getActionAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Action__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Action__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Action__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getActionAccess().getAlternatives_1()); }
	(rule__Action__Alternatives_1)
	{ after(grammarAccess.getActionAccess().getAlternatives_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Action__Group_1_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Action__Group_1_1__0__Impl
	rule__Action__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Action__Group_1_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getActionAccess().getValeurAssignment_1_1_0()); }
	(rule__Action__ValeurAssignment_1_1_0)
	{ after(grammarAccess.getActionAccess().getValeurAssignment_1_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Action__Group_1_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Action__Group_1_1__1__Impl
	rule__Action__Group_1_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Action__Group_1_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getActionAccess().getVerticalLineKeyword_1_1_1()); }
	'|'
	{ after(grammarAccess.getActionAccess().getVerticalLineKeyword_1_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Action__Group_1_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Action__Group_1_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Action__Group_1_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getActionAccess().getTexteAssignment_1_1_2()); }
	(rule__Action__TexteAssignment_1_1_2)
	{ after(grammarAccess.getActionAccess().getTexteAssignment_1_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Scenario__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getScenarioAccess().getNameSTRINGTerminalRuleCall_1_0()); }
		RULE_STRING
		{ after(grammarAccess.getScenarioAccess().getNameSTRINGTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Scenario__TitleScenarioAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getScenarioAccess().getTitleScenarioSTRINGTerminalRuleCall_3_0()); }
		RULE_STRING
		{ after(grammarAccess.getScenarioAccess().getTitleScenarioSTRINGTerminalRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Scenario__CasDeTestsAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getScenarioAccess().getCasDeTestsCasDeTestParserRuleCall_4_0()); }
		ruleCasDeTest
		{ after(grammarAccess.getScenarioAccess().getCasDeTestsCasDeTestParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CasDeTest__TitreCasDeTestAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCasDeTestAccess().getTitreCasDeTestSTRINGTerminalRuleCall_1_0()); }
		RULE_STRING
		{ after(grammarAccess.getCasDeTestAccess().getTitreCasDeTestSTRINGTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CasDeTest__ActionsAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCasDeTestAccess().getActionsActionParserRuleCall_2_0()); }
		ruleAction
		{ after(grammarAccess.getCasDeTestAccess().getActionsActionParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Action__ActionAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getActionAccess().getActionTYPETerminalRuleCall_0_0()); }
		RULE_TYPE
		{ after(grammarAccess.getActionAccess().getActionTYPETerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Action__ValeurAssignment_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getActionAccess().getValeurSTRINGTerminalRuleCall_1_0_0()); }
		RULE_STRING
		{ after(grammarAccess.getActionAccess().getValeurSTRINGTerminalRuleCall_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Action__ValeurAssignment_1_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getActionAccess().getValeurSTRINGTerminalRuleCall_1_1_0_0()); }
		RULE_STRING
		{ after(grammarAccess.getActionAccess().getValeurSTRINGTerminalRuleCall_1_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Action__TexteAssignment_1_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getActionAccess().getTexteSTRINGTerminalRuleCall_1_1_2_0()); }
		RULE_STRING
		{ after(grammarAccess.getActionAccess().getTexteSTRINGTerminalRuleCall_1_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_TYPE : ('ouvrir url'|'saisir identifiant'|'saisir mot de passe'|'clic id='|'naviguer'|'verifier id=');

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
