/*
 * generated by Xtext 2.15.0
 */
package org.xtext.example.mydsl.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.xtext.example.mydsl.ide.contentassist.antlr.internal.InternalMyDslParser;
import org.xtext.example.mydsl.services.MyDslGrammarAccess;

public class MyDslParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(MyDslGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, MyDslGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getActionAccess().getAlternatives_1(), "rule__Action__Alternatives_1");
			builder.put(grammarAccess.getScenarioAccess().getGroup(), "rule__Scenario__Group__0");
			builder.put(grammarAccess.getCasDeTestAccess().getGroup(), "rule__CasDeTest__Group__0");
			builder.put(grammarAccess.getActionAccess().getGroup(), "rule__Action__Group__0");
			builder.put(grammarAccess.getActionAccess().getGroup_1_1(), "rule__Action__Group_1_1__0");
			builder.put(grammarAccess.getScenarioAccess().getNameAssignment_1(), "rule__Scenario__NameAssignment_1");
			builder.put(grammarAccess.getScenarioAccess().getTitleScenarioAssignment_3(), "rule__Scenario__TitleScenarioAssignment_3");
			builder.put(grammarAccess.getScenarioAccess().getCasDeTestsAssignment_4(), "rule__Scenario__CasDeTestsAssignment_4");
			builder.put(grammarAccess.getCasDeTestAccess().getTitreCasDeTestAssignment_1(), "rule__CasDeTest__TitreCasDeTestAssignment_1");
			builder.put(grammarAccess.getCasDeTestAccess().getActionsAssignment_2(), "rule__CasDeTest__ActionsAssignment_2");
			builder.put(grammarAccess.getActionAccess().getActionAssignment_0(), "rule__Action__ActionAssignment_0");
			builder.put(grammarAccess.getActionAccess().getValeurAssignment_1_0(), "rule__Action__ValeurAssignment_1_0");
			builder.put(grammarAccess.getActionAccess().getValeurAssignment_1_1_0(), "rule__Action__ValeurAssignment_1_1_0");
			builder.put(grammarAccess.getActionAccess().getTexteAssignment_1_1_2(), "rule__Action__TexteAssignment_1_1_2");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private MyDslGrammarAccess grammarAccess;

	@Override
	protected InternalMyDslParser createParser() {
		InternalMyDslParser result = new InternalMyDslParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public MyDslGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(MyDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
